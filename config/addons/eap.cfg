# Include servo hardware definition separately to allow for automatic upgrade
[include eap_hw.cfg]

# Based on this project:
# https://github.com/bombela/EjectionAssistedPurge

######################################################################################
#                                   Basic Diagram                                    #
######################################################################################

# [           PURGE AREA            ]    [  BRUSH AREA  ]              
# [                                 ]    [              ]              
# [                                 ]    [              ]              
# [                                 ]    [              ]              
#                ┌─────────────────┐  *pause                           
#                │*   grove_len   *│ ┌─┐ ┌──────────────┐              
# ┌──────────────┼─────────────────┤ │ │ │**************│ * brush_start
# └──────────────┼─────────────────┤ │ │ │**************│              
#                │*grove_start     │ └─┘ └──────────────┘              
#                └─────────────────┘     * brush_stroke *              
#                                                                      
#  *push_rod      *cooling_pos      
#                                   
# check https://asciiflow.com/#/

######################################################################################
#                                 Included Macros                                    #
######################################################################################

# BRUSH
# PURGE
# PURGE_PARK
# PURGE_HOME
# PURGE_EJECT

[gcode_macro _PURGE_CFG]
# Configuration settings for purging, brushing, and ejection processes in the printer.
description: Configuration variables for the EAP system
gcode: # Leave empty

# Brushing Configuration
# ------------------------------------------------------------------------------
# Coordinates and settings for the brushing operation.
variable_brush_start: 131, 348.2             # Start position for brushing (X, Y). A few mm past the right side of the brush.
variable_brush_stroke: -40                   # Stroke length relative to start position. A few mm past the left of the brush.
variable_brush_clear: 15                     # X distance relative to the start position to clear away from the brush.
variable_brush_speed: 350                    # Brushing speed in mm/s.
variable_brush_count: 4                      # Number of brushing cycles.

# Purging Configuration
# ------------------------------------------------------------------------------
# Settings for the purging process, including positions and volumes.
variable_groove_start: 54, 348.2             # Start position of purging groove (X, Y). 
variable_cooling_pos: 15, -6                 # Cooling position relative to groove start (X, Y).
variable_cooling_period: 15                  # Minimum cooling time in seconds.
variable_cooling_fan_speed: 50               # Fan speed from 0-100%.
variable_purge_volume: 140                   # Default purging amount in mm³.
variable_purge_volume_minimum: 60            # Minimum purging volume to prime nozzle in mm³.
variable_purge_volume_modifier: 0.4          # Modifier factor for slicer purge values (for efficiency).
variable_purge_volume_addition: 1            # Extra length added to purge volume (consider cutters) in mm³.
variable_purge_brush_count: 2                # How many times to plow through the brush after a purge. 0 to disable and only plow through once.
variable_flowrate: 20                        # Purging flow rate in mm³/s.
variable_pause: 800                          # Pause after purge in milliseconds to relieve pressure in melting area.
#variable_retraction: 5.0                     # Retraction volume post-purge in mm³ to relieve pressure in melting area.
#variable_retraction_speed: 35                # Retraction speed in mm/s.
variable_groove_len: 35                      # Length of the groove for purging.
variable_fil_csa: 2.405                      # Filament cross-section area in mm² (for 1.75mm filament).
variable_groove_csa: 5.3                     # Groove cross-section area in mm².
variable_detailed_logging: 1                 # Show detailed logging during purging. 1 to enable 0 to disable.

# Ejection Configuration
# ------------------------------------------------------------------------------
# Parameters for controlling the servo during the ejection process.
variable_servo_dwell: 400                    # Time for full servo actuation in milliseconds.
variable_ejection_count: 3                   # Number of actuations for pellet ejection.

# General Configuration
# ------------------------------------------------------------------------------
# Miscellaneous and safety settings.
variable_z_min: 5                            # Safety Z limit. Below this, actions are refused.
variable_travel_speed: 400                   # Speed for travel moves in mm/s.

[gcode_macro BRUSH]
# This macro performs a brushing operation to clean the printer's nozzle.
#
# Parameters:
#   CLEAR=1       - Flag to clear away from the brush at the end (1 to enable, 0 to disable)
#   ZHOP=-1       - Z hop height in mm (positive value to enable)
#   ZCHECK=1      - Flag to check if Z is too low before the operation (1 to enable, 0 to disable)

gcode:
    {% set cfg = printer['gcode_macro _PURGE_CFG'] %}                                                          # Configuration from _PURGE_CFG macro

    # Initializing parameters with default values or user inputs
    {% set clear = params.CLEAR|default(1)|int %}                                                              # Flag to clear after brushing
    {% set zhop = params.ZHOP|default(-1)|float %}                                                             # Z hop height. This should bed removed, is handled by HH
    {% set zcheck = params.ZCHECK|default(0)|int %}                                                            # Flag for Z position check

    # Retrieving configuration settings
    {% set tspeed = cfg.travel_speed * 60 %}                                                                   # Travel speed calculation
    {% set wspeed = cfg.brush_speed * 60 %}                                                                    # Brushing speed calculation
    {% set sx = cfg.brush_start[0] %}                                                                          # X coordinate of brush start
    {% set sy = cfg.brush_start[1] %}                                                                          # Y coordinate of brush start

    # Error checking for printer state
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("EAP: Not homed") }                                                               # Error if printer is not homed
    {% elif zcheck and printer.toolhead.position.z < cfg.z_min %}
        { action_raise_error("EAP: Z too low") }                                                               # Error if Z position is too low
    {% else %}
        # Saving the current G-code state
        SAVE_GCODE_STATE NAME=EAP_BRUSH

        # Applying Z hop if enabled
        {% if zhop >= 0.0 %}
            G91                                                                                                # Set to relative positioning
            G0 Z{zhop} F{tspeed}                                                                               # Z hop move
        {% endif %}

        # Moving to the brush start position
        G90                                                                                                    # Set to absolute positioning
        G0 X{sx} Y{sy} F{tspeed}                                                                               # Move to start of brush

        # Performing the brushing operation
        {% for _ in range(0, cfg.brush_count) %}
            G0 X{sx + cfg.brush_stroke} F{wspeed}                                                              # Stroke forward
            G0 X{sx} F{wspeed}                                                                                 # Stroke backward
        {% endfor %}

        # Clearing move if enabled
        {% if clear == 1 %}
            G0 X{sx + cfg.brush_clear} F{tspeed}                                                                # Clearing move
        {% endif %}

        # Restoring Z position if Z hop was used
        {% if zhop >= 0.0 %}
            G91                                                                                                 # Set to relative positioning
            G0 Z{-zhop} F{tspeed}                                                                               # Return to original Z position
        {% endif %}

        # Restoring the saved G-code state
        RESTORE_GCODE_STATE NAME=EAP_BRUSH
    {% endif %}


[gcode_macro PURGE]
# Eject the previous purge, then purge and plow through the brush.
#
# Parameters:
#   VOL=cfg.purge_volume          - Purge volume in mm³ (default is set in _PURGE_CFG)
#   FLOW=cfg.flowrate             - Purging flow rate in mm³/s (default is set in _PURGE_CFG)
#   RET=cfg.retraction            - Retraction amount in mm³ (default is set in _PURGE_CFG)
#   retract_speed=cfg.retraction_speed - Retraction speed in mm/s (default is set in _PURGE_CFG)
#   BRUSH_CLEAR=1                 - Flag to clear away from the brush at the end (1 to enable, 0 to disable)
#   EJECT=1                       - Flag to call PURGE_HOME before purging (1 to enable, 0 to disable)
#   ZHOP=-1                       - Z hop height in mm (positive value to enable)
#   ZCHECK=1                      - Flag to check if Z is too low (1 to enable, 0 to disable)
#
# Maximum purge volume: abs(groove_len) * groove_csa.
# Example: 35mm * 5.3mm³ == 185mm³

variable_last_purge: 0.0

gcode:
    {% set cfg = printer['gcode_macro _PURGE_CFG'] %}                                                           # Accesses the printer's purge configuration settings
    MMU_SERVO POS=up                                                                                            # Positions the MMU (Multi-Material Unit) servo to the 'up' position

    # Setting up default values or user inputs
    {% set vol = params.VOL|default(cfg.purge_volume)|float %}                                                  # Purge volume in mm³, with a default from the purge configuration
    {% set flow = params.FLOW|default(cfg.flowrate)|float %}                                                    # Flow rate for purging in mm³/s, with a default from Happy Hare mmu_parameters.cfg 
    {% set retract = params.RET|default(printer.mmu.toolchange_retract)|float %}                                # Retraction in mm, with a default from the Happy Hare mmu_parameters.cfg
    {% set retract_speed = params.retract_speed|default(printer.mmu.toolchange_retract_speed)|float %}          # Retraction speed in mm/s, with a default from the purge configuration
    {% set pause_ms = params.PAUSE_MS|default(cfg.pause)|int %}                                                 # Pause duration in milliseconds, with a default from the purge configuration
    {% set brush_count = params.BRUSH_COUNT|default(cfg.purge_brush_count)|int %}                               # Number of brush strokes, with a default from the purge configuration
    {% set brush_clear = params.BRUSH_CLEAR|default(1)|int %}                                                   # Flag for clearing away from the brush at the end (1 to enable, 0 to disable)
    {% set eject = params.EJECT|default(1)|int %}                                                               # Flag to call PURGE_HOME before purging (1 to enable, 0 to disable)
    {% set zhop = params.ZHOP|default(-1)|float %}                                                              # Z hop height in mm (positive value to enable)
    {% set zcheck = params.ZCHECK|default(0)|int %}                                                             # Flag to check if Z is too low (1 to enable, 0 to disable)
    {% set logging = params.LOGGING|default(cfg.detailed_logging)|int%}                                         # Show detailed information before purging

    # Calculating essential parameters
    {% set tspeed = cfg.travel_speed * 60 %}                                                                    # Travel speed for toolhead movements, converted to mm/min
    {% set max_vol = (cfg.groove_len|abs * cfg.groove_csa) %}                                                   # Maximum purge volume calculated from groove dimensions
    {% set sx = cfg.groove_start[0] %}                                                                          # X-coordinate for the start of the purge groove
    {% set sy = cfg.groove_start[1] %}                                                                          # Y-coordinate for the start of the purge groove
    {% set initial_fan_speed = printer.fan.speed / printer.configfile.settings.fan.max_power %}                 # Stores the initial fan speed
    {% set from_tool = printer.mmu.last_tool %}                                                                 # The tool from which the printer is switching
    {% set to_tool = printer.mmu.tool %}                                                                        # The tool to which the printer is switching
    {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}                                                    # Purge volumes as defined in the slicer tool map

    # Determining purge length
    {% if params.VOL %}
        {action_respond_info("EAP: param PURGE_LENGTH provided")}
        {% set purge_len = params.VOL|float / cfg.fil_csa %}
    {% elif from_tool == to_tool %}
        {action_respond_info("EAP: Tool didn't change (T%s > T%s), " ~ "priming" if cfg.purge_volume_minimum else "skipping"  % (from_tool, to_tool))}
        {% set purge_len = 0 %}
    {% elif pv %}
        # Fetching purge volume from slicer
        {% if from_tool < 0 and to_tool >= 0 %}
            {action_respond_info("EAP: from tool unknown. Finding largest value for T? > T%d" % to_tool)}
            {% set purge_vol = pv|map(attribute=to_tool)|max %}
        {% elif to_tool < 0 %}
            {action_respond_info("EAP: tool(s) unknown. Finding largest value")}
            {% set purge_vol = pv|map('max')|max %}
        {% else %}
            {% set purge_vol = pv[from_tool][to_tool]|float * cfg.purge_volume_modifier %}
            {action_respond_info("EAP: Swapped T%s > T%s" % (from_tool, to_tool))}
        {% endif %}
        {% set purge_len = (purge_vol / cfg.fil_csa) + cfg.purge_volume_addition %}
    {% else %}
        {action_respond_info("EAP: No toolmap or PURGE_LENGTH. Using default")}
        {% set purge_len = vol|float / cfg.fil_csa %}
    {% endif %}
    {% set purge_len = purge_len + printer.mmu.extruder_filament_remaining + printer.mmu.extruder_residual_filament + printer.mmu.toolchange_retract %}
    {% set purge_len = [purge_len,cfg.purge_volume_minimum]|max %}
    {% set total_purge_volume = purge_len * cfg.fil_csa %}
    {action_respond_info("EAP: Initiating purge with length: %.2fmm (Equivalent volume: %.2fmm³) of filament" % (purge_len|float, total_purge_volume))}
    
    # Error checking for pre-purge conditions
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("EAP: Not homed") }
    {% elif zcheck and printer.toolhead.position.z < cfg.z_min %}
        { action_raise_error("EAP: Z too low") }
    {% else %}
        # Purging process
        SAVE_GCODE_STATE NAME=EAP_PURGE
        {% if zhop >= 0.0 %}
            G91
            G0 Z{zhop} F{tspeed} # Z hop move
        {% endif %}
        G90 # Absolute positioning
        {% if eject %}
            PURGE_HOME ZCHECK={zcheck}
        {% else %}
            G0 X{sx} Y{sy} F{tspeed} # Move to start of purge
        {% endif %}
    
        # Calculate number of required purges and loop through them
        {% set num_purges = (total_purge_volume / max_vol)|round(0, 'ceil')|int %}
        {% for _ in range(num_purges) %}
            {% set current_purge_volume = [total_purge_volume / num_purges, max_vol]|min %}
            {% set current_dist = current_purge_volume / cfg.groove_csa %}
            {% set current_feed = flow / cfg.groove_csa %}
            {% set current_fil = current_purge_volume / cfg.fil_csa %}
            {% set ret_vol = retract * cfg.fil_csa %}
    
            {% if loop.index == 1 and logging == 1 %}
                {action_respond_info(
                """
                EAP:
                +--------------------------+-----------------------+
                |<-------Purge Info------->|<--------Value-------->|
                +--------------------------+-----------------------+
                |Total purge volume........|......%.3f mm³
                | |Groove volume...........|......%.3f mm³
                | |Needed purge count......|......%d
                | |Volume pr purge.........|......%.3f mm³
                | |Filament pr purge.......|......%.2f mm
                |--------------------------|-----------------------|
                |Purge travel distance.....|......%.2f mm
                | |Feed rate...............|......%.2f mm/s
                | |Flow rate...............|......%.2f mm
                | |Pause after purge.......|......%.2f ms
                |--------------------------|-----------------------|
                |Retraction volume.........|......%.3f mm³
                | |Retraction distance.....|......%.2f mm
                | |Retraction speed........|......%.2f mm/s
                | |Purge brush count.......|......%d
                +--------------------------+-----------------------+
                """ % (total_purge_volume, max_vol, num_purges, current_purge_volume, current_fil, current_dist, current_feed, cfg.flowrate, cfg.pause, ret_vol, retract, retract_speed, cfg.purge_brush_count))
                }
            {% endif %}
            {action_respond_info("EAP: Executing purge number " + loop.index|string + " with length: %.2fmm (Equivalent volume: %.2fmm³) of filament" % (current_fil, current_purge_volume))}
            M106 S{255|int * (cfg.cooling_fan_speed/100)}
            M83 # Extruder to relative mode
            {action_respond_info("EAP: Executing purge number " + loop.index|string + " with length: %.2fmm (Equivalent volume: %.2fmm³) of filament" % (current_fil, current_purge_volume))}
            G1 X{sx + current_dist} E{current_fil} F{current_feed * 60}
            G1 E-{retract} F{retract_speed * 60}
            M400
            {action_respond_info("EAP: Retracted %.2fmm of filament (Retraction Volume: %.2fmm³)" % (retract, ret_vol))}
            # Brush routine, executed after each purge
            {% if pause_ms > 0 %}
                G0 X{cfg.brush_start[0] + cfg.brush_stroke} Y{cfg.brush_start[1]} F{cfg.brush_speed * 60}
                G4 P{pause_ms}
            {% endif %}
    
            {% if brush_count >= 2 %}
                {% for _ in range(brush_count) %}
                    G0 X{cfg.brush_start[0]} Y{cfg.brush_start[1]} F{cfg.brush_speed * 60}
                    G0 X{cfg.brush_start[0] + cfg.brush_stroke} Y{cfg.brush_start[1]} F{cfg.brush_speed * 60}
                    G0 X{cfg.brush_start[0]} Y{cfg.brush_start[1]} F{cfg.brush_speed * 60}
                {% endfor %}
            {% else %}
                G0 X{cfg.brush_start[0]} Y{cfg.brush_start[1]} F{cfg.brush_speed * 60}
            {% endif %}
            
            # Call PURGE_HOME macro to handle pellet ejection and toolhead positioning
            {% if not loop.last %}
                PURGE_HOME
            {% endif %}
        {% endfor %}
    
        M106 S{initial_fan_speed * 255|int}
        {% if brush_clear == 1 %}
            G0 X{cfg.brush_start[0] + cfg.brush_clear} F{tspeed}
        {% endif %}
        {% if zhop >= 0.0 %}
            G91
            G0 Z-{zhop} F{tspeed}
        {% endif %}
        RESTORE_GCODE_STATE NAME=EAP_PURGE
        # Final retract to match what Happy Hare is expecting
        G1 E-{printer.mmu.toolchange_retract} F{printer.configfile.settings.mmu.toolchange_retract_speed * 60}
    {% endif %}


[gcode_macro PURGE_PARK]
# This macro moves the toolhead to the start position of the purge groove.

gcode:
    SAVE_GCODE_STATE NAME=EAP_PURGE_PARK
    {% set cfg = printer['gcode_macro _PURGE_CFG'] %}                                                           # Accesses the printer's purge configuration settings
    {% set tspeed = cfg.travel_speed * 60 %}                                                                    # Set the travel speed, converting to mm/min if needed
    {% set sx = cfg.groove_start[0] %}                                                                          # X-coordinate for the start of the purge groove
    {% set sy = cfg.groove_start[1] %}                                                                          # Y-coordinate for the start of the purge groove

    G90                                                                                                         # Use absolute positioning
    G0 X{sx} Y{sy} F{tspeed}                                                                                    # Move to the groove start position
    RESTORE_GCODE_STATE NAME=EAP_PURGE_PARK


[gcode_macro PURGE_HOME]
# This macro positions the toolhead close to the ejection system, manages cooling,
# ejects the pellet, and then positions the toolhead above the purging groove.
# It also manages the fan state during this process.
#
# Parameters:
#   ZHOP=-1       - Z hop height in mm (positive value to enable)
#   ZCHECK=1      - Flag to check if Z is too low before the operation (1 to enable, 0 to disable)

gcode:
    {% set cfg = printer['gcode_macro _PURGE_CFG'] %}                                                           # Retrieving configuration from _PURGE_CFG macro

    # Initializing parameters with default values or user inputs
    {% set zhop = params.ZHOP|default(-1)|float %}                                                              # Z hop height
    {% set zcheck = params.ZCHECK|default(0)|int %}                                                             # Flag for Z position check

    # Retrieving configuration and macro settings
    {% set mp = printer['gcode_macro PURGE'] %}
    {% set tspeed = cfg.travel_speed * 60 %}                                                                    # Travel speed calculation
    {% set sx = cfg.groove_start[0] %}                                                                          # X coordinate of purging start
    {% set sy = cfg.groove_start[1] %}                                                                          # Y coordinate of purging start
    {% set cx = sx + cfg.cooling_pos[0] %}                                                                      # X coordinate of cooling position
    {% set cy = sy + cfg.cooling_pos[1] %}                                                                      # Y coordinate of cooling position
    {% set initial_fan_speed = printer.fan.speed / printer.configfile.settings.fan.max_power %}                 # Initial fan speed calculation

    # Error checking for printer state
    {% if "xyz" not in printer.toolhead.homed_axes %}
        { action_raise_error("EAP: Not homed") }                                                                # Error if printer is not homed
    {% elif zcheck and printer.toolhead.position.z < cfg.z_min %}
        { action_raise_error("EAP: Z too low") }                                                                # Error if Z position is too low
    {% else %}
        # Saving the current G-code state
        SAVE_GCODE_STATE NAME=EAP_PURGE_HOME

        # Applying Z hop if enabled
        {% if zhop >= 0.0 %}
            G91                                                                                                 # Set to relative positioning
            G0 Z{zhop} F{tspeed}                                                                                # Z hop move
        {% endif %}

        # Moving to the cooling position
        G90  # Set to absolute positioning
        G0 X{cx} Y{cy} F{tspeed}                                                                                # Move to cooling position
        M106 S{255|int * (cfg.cooling_fan_speed/100)}                                                           # Turning on the fan

        # Waiting for the cooling period if necessary
        {% if printer.idle_timeout.state == "Printing" %}
            {% set elapsed = printer.idle_timeout.printing_time - mp.last_purge %}
            {% if elapsed > 0.0 and elapsed < cfg.cooling_period %}
                { action_respond_info("EAP: Waiting for pellet to cool...") }
                G4 P{cfg.cooling_period - elapsed}                                                              # Pause for remaining cooling time
            {% endif %}
        {% endif %} 
        SET_GCODE_VARIABLE MACRO=PURGE VARIABLE=last_purge VALUE={printer.idle_timeout.printing_time}

        # Ejecting the pellet
        { action_respond_info("EAP: Ejecting the pellet...") }
        PURGE_EJECT

        # Moving to the purging position
        G0 X{sx} Y{sy} F{tspeed}                                                                                # Move to purging start position

        # Restoring Z position if Z hop was used
        {% if zhop >= 0.0 %}
            G91                                                                                                 # Set to relative positioning
            G0 Z{-zhop} F{tspeed}                                                                               # Return to original Z position
        {% endif %}

        M106 S{initial_fan_speed * 255|int}                                                                     # Restoring the fan speed to its initial state
        
        # Restoring the saved G-code state
        RESTORE_GCODE_STATE NAME=EAP_PURGE_HOME
    {% endif %}

[gcode_macro PURGE_EJECT]
description: Eject
# This macro is responsible for ejecting the pellet in the 3D printer.
#
# Async ejection state tracking:
#  -1: unknown
#   0: closed
#   1: opening
#   2: closing
#
# TODO: Awaiting implementation of async G-code synced to print time in Klipper for truly asynchronous operation.

# Declaration of global variables to track the state and stroke count
variable_e_state: -1                                                                                            # Tracks the current ejection state (-1: unknown, 0: closed, 1: opening, 2: closing)
variable_e_stroke: 0                                                                                            # Tracks the number of ejection strokes

gcode:
    # Retrieving configuration from _PURGE_CFG macro
    {% set cfg = printer['gcode_macro _PURGE_CFG'] %}

    # Retrieving configuration settings for ejection
    {% set dwell_s = cfg.servo_dwell / 1000 %}                                                                  # Servo dwell time in seconds

    # Determining the state of the ejection mechanism
    {% if e_state == -1 %}  # State is unknown
        # Unknown state: Initiate opening with an extra half-stroke for safety
        SET_GCODE_VARIABLE MACRO=PURGE_EJECT VARIABLE=e_state VALUE=1                                           # Setting state to opening
    {% else %}
        # Known state: Proceed to closing the ejection mechanism
        # PURGE_EJECT_WAIT
        SET_GCODE_VARIABLE MACRO=PURGE_EJECT VARIABLE=e_state VALUE=2                                           # Setting state to closing
    {% endif %}

    # Setting the stroke variable to the configured ejection count
    SET_GCODE_VARIABLE MACRO=PURGE_EJECT VARIABLE=e_stroke VALUE={cfg.ejection_count}

    # Executing the wait function for the ejection process
    _PURGE_EJECT_WAIT                                                                                           # Calls a sub-macro to handle the waiting process


[gcode_macro _PURGE_EJECT_WAIT]
description: Wait for the last ejection to complete
# This macro waits for the completion of the last pellet ejection process.
# It's used in tandem with the PURGE_EJECT macro to manage the ejection state machine.

gcode:
    # Retrieving configuration settings and ejection state
    {% set cfg = printer['gcode_macro _PURGE_CFG'] %}                                                           # Configuration from _PURGE_CFG macro
    {% set mp = printer['gcode_macro PURGE_EJECT'] %}                                                           # Accessing the PURGE_EJECT macro state

    # Checking if the ejection state indicates an ongoing process
    {% if mp.e_state > 0 %}  # State > 0 means ejection is ongoing
        # Calculating the dwell time for the servo mechanism
        {% set dwell_ms = cfg.servo_dwell %}  # Dwell time in milliseconds

        # Cancelling any previous scheduled delayed G-code
        UPDATE_DELAYED_GCODE ID=purge_ejection DURATION=0.0                                                     # Cancels any existing delay

        # Waiting for the duration of the dwell time
        # Ensures completion of the current ejection step
        G4 P{dwell_ms|int}                                                                                      # Pause (dwell) for the specified milliseconds

        # Calculating steps for the state machine
        # Accounts for opening, closing, and turnoff steps
        {% set steps = mp.e_stroke * 2 + (mp.e_state == 1)|int + 1 %}                                           # Total steps to complete cycle

        # Driving the state machine to completion
        {% for _ in range(steps) %}
            _PURGE_EJECTION_NEXT SYNC=1                                                                         # Advances to the next step in the state machine
        {% endfor %}
    {% endif %}


[gcode_macro _PURGE_EJECTION_NEXT]
# Move the state machine forward
# This macro advances the ejection state machine, handling the servo's opening and closing actions during the pellet ejection process.
gcode:
    # Retrieving configuration settings from _PURGE_CFG macro
    {% set cfg = printer['gcode_macro _PURGE_CFG'] %}

    # Setting up synchronization parameter for sequence control
    {% set sync = params.SYNC|int %}                                                                            # Parameter to ensure actions follow in sequence

    # Accessing the state and control variables from PURGE_EJECT macro
    {% set mp = printer['gcode_macro PURGE_EJECT'] %}
    {% set done = false %}                                                                                      # Flag to indicate completion of the state machine process

    # Debugging: Display current ejection state and stroke count
    #{ action_respond_info("%s %s" % (mp.e_state, mp.e_stroke)) }

    # Handling the ejection state machine based on current state
    {% if mp.e_state == 1 %}  # State 'opening'
        # Transitioning from opened to closed state
        SET_SERVO SERVO=eap_servo ANGLE=0  # Close servo
        SET_GCODE_VARIABLE MACRO=PURGE_EJECT VARIABLE=e_state VALUE=2                                           # Update state to 'closing'

    {% elif mp.e_state == 2 %}  # State 'closing'
        {% if mp.e_stroke > 0 %}
            # Transitioning from closed to open state for another stroke
            SET_SERVO SERVO=eap_servo ANGLE=180                                                                 # Open servo
            # Decrement stroke count and update state to 'opening'
            SET_GCODE_VARIABLE MACRO=PURGE_EJECT VARIABLE=e_stroke VALUE={mp.e_stroke - 1}
            SET_GCODE_VARIABLE MACRO=PURGE_EJECT VARIABLE=e_state VALUE=1

        {% else %}
            # No more strokes left, turn off the servo and set state to 'closed'
            SET_SERVO SERVO=eap_servo WIDTH=0                                                                   # Turn off servo
            SET_GCODE_VARIABLE MACRO=PURGE_EJECT VARIABLE=e_state VALUE=0                                       # Set state to closed
            {% set done = true %}                                                                               # Mark the process as done

        {% endif %}

    {% else %}  # State unknown or already closed
        # Invalid state: Raise an error
        { action_raise_error("EAP: invalid state %d" % mp.e_state) }
    {% endif %}

    # Managing servo movement delay based on synchronization setting
    {% if not done %}
        {% if sync %}
            # Synchronous waiting for servo to reach position
            G4 P{cfg.servo_dwell}                                                                               # Dwell for servo movement
        {% else %}
            # Asynchronous waiting for servo to reach position
            UPDATE_DELAYED_GCODE ID=purge_ejection DURATION={cfg.servo_dwell/1000}
        {% endif %}
    {% endif %}  # End of servo movement handling


[delayed_gcode purge_ejection]
# Asynchronous advancement of the ejection state machine
# This delayed G-code is responsible for asynchronously advancing the ejection state machine.
# It is triggered after a predefined delay and calls the _PURGE_EJECTION_NEXT macro 
# with the SYNC parameter set to 0, indicating an asynchronous operation.

gcode:
    _PURGE_EJECTION_NEXT SYNC=0